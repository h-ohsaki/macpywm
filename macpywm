#!/usr/bin/env python3
#
#
# Copyright (c) 2021, Hiroyuki Ohsaki.
# All rights reserved.
#
# $Id: $
#

import fileinput
import os
import os.path
import re
import subprocess
import json
import sys
import itertools
from collections import namedtuple

from perlcompat import die, warn, getopts
import tbdump

def usage():
    die(f"""\
usage: {sys.argv[0]} [-v] [file...]
  -v    verbose mode
""")

FRAME_WIDTH = 0
Y_OFFSET = 8

LAYOUT_OFFSET = 0
# regexp: [x, y, width, height]
LAYOUT_RULES = {
    r'ターミナル': [.5, .3, .5, .7],
    r'emacs': [0, 0, .5 - LAYOUT_OFFSET, 1],
    r'Safari':
    [.5 - LAYOUT_OFFSET, 0, .5 + LAYOUT_OFFSET, 1],
    r'pdf|dvi|office|acroread|tgif|mathematica|libre':
    [.5 - LAYOUT_OFFSET, 0, .5 + LAYOUT_OFFSET, 1],
}

# [x, y, width, height] of south-east, north-east, south-west, north-west windows
QUARTER_GEOMETRIES = [[.5, .5, .5, .5], [.5, 0, .5, .5], [0, .5, .5, .5],
                      [0, 0, .5, .5]]

TILE_COUNTS = {
    1: [1, 1],
    2: [2, 1],
    3: [2, 2],
    4: [2, 2],
    5: [3, 2],
    6: [3, 2],
    7: [3, 3],
    8: [3, 3],
    9: [3, 3],
    10: [4, 3],
    11: [4, 3],
    12: [4, 3],
    13: [4, 4],
    14: [4, 4],
    15: [4, 4],
    16: [4, 4],
    17: [5, 4],
    18: [5, 4],
    19: [5, 4],
    20: [5, 4],
    21: [5, 5],
    22: [5, 5],
    23: [5, 5],
    24: [5, 5],
    25: [5, 5],
    26: [6, 5],
    27: [6, 5],
    28: [6, 5],
    29: [6, 5],
    30: [6, 5],
}

Geometry = namedtuple('Geometry', ['x', 'y', 'width', 'height'])

def debug(fmt, *args):
    if args:
        msg = '** debug: ' + fmt % args
    else:
        msg = '** debug: ' + fmt
    i = msg.find(' ->')
    if i >= 0:
        msg = msg[0:i] + (' ' * (50 - i)) + msg[i:]
    print(msg, file=sys.stderr)

class WindowManager():
    def __init__(self):
        output = subprocess.getoutput('yabai -m query --windows')
        self.props = json.loads(output)
        self.exposed_windows = [prop['id'] for prop in self.props if prop['visible']]
        self.managed_windows = [prop['id'] for prop in self.props]

    def get_window_class(self, window):
        for prop in self.props:
            if prop['id'] == window:
                return prop['app']
        return ''

    def get_window_geometry(self, window):
        for prop in self.props:
            if prop['id'] == window:
                frame = prop['frame']
                return Geometry(frame['x'], frame['y'], frame['w'], frame['h'])
        return None

    def is_managed_window(self, window):
        """Check if the window WINDOW is under the control of the window
        manager."""
        return window in self.managed_windows

    def window_shortname(self, window):
        if window is None:
            return '-- [--]'
        cls = self.get_window_class(window)
        return f'0x{window:x} [{cls}]'

    def focus_window(self, window):
        """Activate the input to the window WINDOW and the window frame is
        displayed."""
        if not self.is_managed_window(window):
            return

        # FIXME: called two times? might be redundant
        debug('focus_window: %s', self.window_shortname(window))
        subprocess.run(f'yabai -m window {window} --focus {window}', shell=True)

    def focus_next_window(self, window=None):
        """Change the active window from the window WINDOW to the next one.
        The active window is raised and focused.  The pointer is moved to the
        north-west of the window."""
        debug('focus_next_window: %s', self.window_shortname(window))
        def _sort_key(window):
            geom = self.get_window_geometry(window)
            if geom is None:
                return 100000000
            else:
                return geom.x * 1000000 + geom.y * 1000 + window
    
        # sort active windows with their geometries
        windows = sorted(self.exposed_windows, key=_sort_key)
        print(windows)
        try:
            i = windows.index(window)
            next_window = windows[(i + 1) % len(windows)]
        except ValueError:
            if windows:
                next_window = windows[0]
            else:
                return
        self.focus_window(next_window)

    def is_terminal_window(self, window):
        """Check if the window WINDOW seems to be a terminal emulator."""
        cls = self.get_window_class(window)
        return 'ターミナル' in cls.lower()

    def layout_all_windows(self, *args):
        debug('layout_all_windows')
        nterms = sum( [1 for window in self.exposed_windows \
                if self.is_terminal_window(window)])
        term_count = 0
        for window in self.exposed_windows:
            if self.is_terminal_window(window) and nterms >= 2:
                # layout every terminal to span the quarter of the screen
                self.layout_window(window, quarter=term_count)
                term_count += 1
            else:
                # layout according to the predefined rules
                self.layout_window(window)

    def get_screen_size(self):
        """Return the dimension (WIDTH, HEIGHT) of the current screen as a
        tuple in pixels.  If xrandr command exsits and either DP (DisplayPort)
        or HDMI output is active, return its dimensionn instead of the screen
        size of the current X11 display."""
        return 1680, 1080

    def get_usable_screen_size(self):
        """Return the dimensionn (WIDTH, HEIGHT) of the usable screen are
        (i.e., the area of the current screen excluding the are for displaying
        status monitor using, for example, xpymon."""
        width, height = self.get_screen_size()
        width -= FRAME_WIDTH * 2
        height -= FRAME_WIDTH * 2 + Y_OFFSET
        debug('get_usable_screen_size -> w:%d h:%d', width, height)
        return width, height

    def convert_geomtry(self, x, y, width, height, as_dict=True):
        """Convert a geometry X, Y, WIDTH and HEIGHT from the unit coordinate
        to the pixel coordinate.  For instance, the point (0.5, 1.0) in the
        unit coordinate is mapped to the mid-bottom (i.e., south) of the
        screen.  Return as a tuple by default.  If AS_DICT is True, return as
        a dictionary with keys `x', `y', `width' and `height'."""
        screen_width, screen_height = self.get_usable_screen_size()
        px = FRAME_WIDTH + int(screen_width * x)
        py = Y_OFFSET + FRAME_WIDTH + int(screen_height * y)
        pwidth = int(screen_width * width)
        pheight = int(screen_height * height)
        debug('convert_geomtry: x=%s y=%s w=%s h=%s -> x:%s y:%s w:%s h:%s', x,
              y, width, height, px, py, pwidth, pheight)
        if as_dict:
            return {'x': px, 'y': py, 'width': pwidth, 'height': pheight}
        else:
            return px, py, pwidth, pheight

    def configure_window(self, window, x, y, width, height):
        debug('configure_window: %s %s %s %s %s', self.window_shortname(window), x, y, width, height)
        subprocess.run(f'yabai -m window {window} --move abs:{x}:{y}', shell=True)
        subprocess.run(f'yabai -m window {window} --resize abs:{width}:{height}', shell=True)

    def find_geometry_by_rules(self, window):
        """Look through the configuration variable LAYOUT_RULES and identify
        the desired geometry (x, y, width, and height) of WINDOW.  The geometry is returned as
        a dictionary.  Return None if no rule is found."""
        debug('find_geometry_by_rules: %s', self.window_shortname(window))
        cls = self.get_window_class(window)
        cur_geom = self.get_window_geometry(window)
        if cur_geom is None:
            return None
        screen_width, screen_height = self.get_usable_screen_size()
        for regexp, geom in LAYOUT_RULES.items():
            if re.search(regexp, cls, flags=re.IGNORECASE):
                debug("  rule found -> '%s': %s", regexp, geom)
                # toggle the location of office applications
                if 'office' in regexp and cur_geom.x > screen_width / 4:
                    geom = [0, 0, .5 + LAYOUT_OFFSET, 1]
                return self.convert_geomtry(*geom)
        return None

    def layout_window(self, window, quarter=None):
        """Resize and move the window WINDOW based on predefined rules.  If
        QUARTER is specified, the window is placed so that the exact quarter
        of the screen is occupied.  Otherwise, the geometry is determined
        based on rules specifed by the variable
        `LAYOUT_RULES'."""
        debug('layout_window: %s q=%s', self.window_shortname(window), quarter)
        if quarter is not None:
            geom = QUARTER_GEOMETRIES[quarter % 4]
            self.configure_window(window, **self.convert_geomtry(*geom))
            return True
        else:
            geom_dict = self.find_geometry_by_rules(window)
            if geom_dict is not None:
                self.configure_window(window, **geom_dict)
                return True
        return False

    def tile_all_windows(self, *args):
        debug('tile_all_windows')
        """Resize and move all windows on the current virtual screen so that
        all windows have the equal size."""
        def _sort_key(window):
            # force Emacs be the last in the window list
            if 'emacs' in self.get_window_class(window).lower():
                return 0x7fffffff
            else:
                # NOTE: new windows have larger IDs?
                return window

        windows = sorted(self.exposed_windows, key=_sort_key)
        ncols, nrows = TILE_COUNTS[len(windows)]
        for col in reversed(range(ncols)):
            for row in reversed(range(nrows)):
                if not windows:
                    break

                window = windows.pop(0)
                x = 1 / ncols * col
                y = 1 / nrows * row
                width = 1 / ncols
                height = 1 / nrows

                if not windows:
                    # the last window is stretched to fill the remaining area
                    rest_height = 1 / nrows * row
                    y -= rest_height
                    height += rest_height

                debug('  %s @ (%d, %d) -> x:%s y:%s w:%s h:%s',
                      self.window_shortname(window), col, row, x, y, width,
                      height)
                self.configure_window(window, **self.convert_geomtry(x, y, width, height))

    def maximize_window(self, window, horizontally=True, vertically=True):
        """Resize the geometry of the window WINDOW to cover the screen
        horizontally and/or vertically."""
        screen_width, screen_height = self.get_usable_screen_size()
        geom = self.get_window_geometry(window)
        if geom is None:
            return
        x, y = geom.x, geom.y
        width, height = geom.width, geom.height
        if horizontally:
            x, width = 0, screen_width
        if vertically:
            y, height = Y_OFFSET, screen_height
        self.configure_window(window, x=x, y=y, width=width, height=height)
        #self.draw_frame_windows(window)
        #window.warp_pointer(PNT_OFFSET, PNT_OFFSET)

    def is_maximized(self, window):
        """Check if the window WINDOW seems to have been maximized."""
        debug('is_maximized: %s', self.window_shortname(window))
        geom = self.get_window_geometry(window)
        print(geom)
        if geom is None:
            return False
        width, height = self.get_usable_screen_size()
        if geom.x == 0 and geom.width + 20 >= width:
            print(1)
            return True
        if abs(geom.y - Y_OFFSET) < 20 and abs(geom.height - height) < 40:
            print(1)
            return True
        return False

    def active_window(self):
        for prop in self.props:
            if prop['focused']:
                return prop['id']
        return None

def main():
    wm = WindowManager()
    try:
        cmd = sys.argv[1]
    except IndexError:
        cmd = 'f'
        
    if cmd.startswith('f'):
        window = wm.active_window()
        wm.focus_next_window(window)
    if cmd.startswith('l'):
        wm.layout_all_windows()
    if cmd.startswith('t'):
        wm.tile_all_windows()
    if cmd.startswith('m'):
        window = wm.active_window()
        if wm.is_maximized(window):
            wm.layout_window(window)
        else:
            wm.maximize_window(window, horizontally=True)
    if cmd.startswith('v'):
        window = wm.active_window()
        if wm.is_maximized(window):
            print(33)
            wm.layout_window(window)
        else:
            wm.maximize_window(window, horizontally=False)

if __name__ == "__main__":
    main()

"""
$ yabai -m query --windows
[{
	"id":69,
	"pid":886,
	"app":"Emacs",
	"title":"*shell*",
	"frame":{
		"x":0.0000,
		"y":0.0000,
		"w":836.0000,
		"h":1040.0000
	},
	"level":0,
	"role":"AXTextField",
	"subrole":"AXStandardWindow",
	"movable":1,
	"resizable":1,
	"display":1,
	"space":1,
	"visible":1,
	"focused":1,
	"split":"none",
	"floating":0,
	"sticky":0,
	"minimized":0,
	"topmost":0,
	"opacity":1.0000,
	"shadow":1,
	"border":0,
	"stack-index":0,
	"zoom-parent":0,
	"zoom-fullscreen":0,
	"native-fullscreen":0
},{
	"id":24,
	"pid":555,
	"app":"ターミナル",
	"title":"ターミナル — screen ▸ fish — 104×29",
	"frame":{
		"x":840.0000,
		"y":525.0000,
		"w":842.0000,
		"h":527.0000
	},
	"level":0,
	"role":"AXWindow",
	"subrole":"AXStandardWindow",
	"movable":1,
	"resizable":1,
	"display":1,
	"space":1,
	"visible":1,
	"focused":0,
	"split":"none",
	"floating":0,
	"sticky":0,
	"minimized":0,
	"topmost":0,
	"opacity":1.0000,
	"shadow":1,
	"border":0,
	"stack-index":0,
	"zoom-parent":0,
	"zoom-fullscreen":0,
	"native-fullscreen":0
},{
	"id":248,
	"pid":556,
	"app":"Safari",
	"title":"Prime Music",
	"frame":{
		"x":840.0000,
		"y":0.0000,
		"w":840.0000,
		"h":1050.0000
	},
	"level":0,
	"role":"AXWindow",
	"subrole":"AXDialog",
	"movable":1,
	"resizable":1,
	"display":1,
	"space":1,
	"visible":0,
	"focused":0,
	"split":"none",
	"floating":0,
	"sticky":0,
	"minimized":1,
	"topmost":0,
	"opacity":1.0000,
	"shadow":1,
	"border":0,
	"stack-index":0,
	"zoom-parent":0,
	"zoom-fullscreen":0,
	"native-fullscreen":0
}]
"""